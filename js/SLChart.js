/*
 * SLChart.js
 *
 * Zach Toogood September 2015
 * zrtoogood@gmail.com
 * zachtoogood.com
 *
 * The purpose of this file is to take a StrongLifts backup file (a .csv generated by the StrongLifts App) and
 * generate a chart using ChartNew.js (by francois.vancoppenolle@favomo.be, http:\\www.favomo.be\graphjs).
 *
 *
 */

// Initial data 
var dataString = "data/spreadsheet-stronglifts.csv";
parseData(dataString);

// Parse and draw data
function parseData(dataString){

	// Set config variables
	var config = {
	
		// Set to false for Imperial measurements
        isMetric : true,
		imperialRatio: 2.20462262185,
		
		// Show/Hide various items
		showBodyweight : true, 
		showSquat : true,
		showBench : true,
		showDeadlift : true,
		showRow : true,
		showOhp : true,
		
		// Chart settings
		//Auto set scale
		chartManualScale : true, 
		chartNumSteps : 15, 
		chartStepSize : 10, 
		chartStartValue : 20
	};

	// Get Data
    Papa.parse(dataString, {
		download: true,
        dynamictyping: true,
		complete: function(results) {
			// Debugging - console.log(results);
            drawChart(results);
		}
	});

    function drawChart(_data){
        var labels = [];
        var weight = [];
        var squat = [];
        var bench = [];
        var deadlift = [];
        var row = [];
        var ohp = [];

        // Set Data
        document.getElementById('notes').innerHTML = '';

		//i = 1 ignore header
        for (i = 1; i < _data.data.length - 1; i++) { 

			//Date
            var _label = _data.data[i][0]; 
			//Date
            var _note = _data.data[i][1];
			
			// BW (if App is set to lbs, csv values are in lbs)
            var _weight = parseFloat(_data.data[i][3]); 
			
			var _squat = parseFloat(_data.data[i][6]) * (config.isMetric ? 1.0 : config.imperialRatio)
			           
            // Alternating, set as null then populate
            var _bench = undefined;
            var _row = undefined;
            var _ohp = undefined;
            var _deadlift = undefined;

            if (i%2 == 0)
            {
				// OH Press and Deadlift
				var _ohp = parseFloat(_data.data[i][14]) * (config.isMetric ? 1.0 : config.imperialRatio); 
				var _deadlift = parseFloat(_data.data[i][22]) * (config.isMetric ? 1.0 : config.imperialRatio);
            } 
			else {		
				// Bench and Row
                var _bench = parseFloat(_data.data[i][14]) * (config.isMetric ? 1.0 : config.imperialRatio);
				var _row = parseFloat(_data.data[i][22]) * (config.isMetric ? 1.0 : config.imperialRatio); 
            }

            if (_weight < 10)
			{
                _weight = undefined;
            }

            labels.push(_label);
            squat.push(_squat);
            weight.push(_weight);
            bench.push(_bench);
            deadlift.push(_deadlift);
            row.push(_row);
            ohp.push(_ohp);
		
			// Populate notes
            if (_note != ""){
                document.getElementById('notes').innerHTML += '<ul><b>' + _label + '</b> : ' + _note + '</ul>';
            }
        }

        // Select Units
		var units = config.isMetric ? "kg" : "lbs"; 


		// Define Chart
        var LineChart = {
            labels: labels,
            datasets: []
        }
		
		if (config.showDeadlift){
			LineChart.datasets.push({
                label: "Deadlift ("+units+")",
                fillColor: "rgba(249,249,10,0.6)",
                strokeColor: "rgba(249,249,10,0.5)",
                pointColor: "rgba(249,249,10,0.5)",
                pointStrokeColor: "rgba(249,249,10,0.5)",
                data: deadlift,
                skipNullValues: true
            });	
		}
		
		if (config.showBodyweight){
			LineChart.datasets.push({
                label: "Bodyweight ("+units+")",
                fillColor: "rgba(252,10,10,0.6)",
                strokeColor: "rgba(252,10,10,0.5)",
                pointColor: "rgba(252,10,10,0.5)",
                pointStrokeColor: "rgba(252,10,10,0.5)",
                data: weight,
                skipNullValues: true
            });	
		}
		
		if (config.showSquat){
			LineChart.datasets.push({
                label: "Squat ("+units+")",
                fillColor: "rgba(10,10,249,0.6)",
                strokeColor: "rgba(10,10,249,0.5)",
                pointColor: "rgba(10,10,249,0.5)",
                pointStrokeColor: "rgba(10,10,249,0.5)",
                data: squat,
                skipNullValues: true
            });	
		}
		
		if (config.showBench){
			LineChart.datasets.push({
                label: "Bench ("+units+")",
                fillColor: "rgba(10,249,10,0.6)",
                strokeColor: "rgba(10,249,10,0.5)",
                pointColor: "rgba(10,249,10,0.5)",
                pointStrokeColor: "rgba(10,249,10,0.5)",
                data: bench,
                skipNullValues: true
            });	
		}
		
		
		if (config.showRow){
			LineChart.datasets.push({
                label: "Row ("+units+")",
                fillColor: "rgba(249,10,249,0.6)",
                strokeColor: "rgba(249,10,249,0.5)",
                pointColor: "rgba(249,10,249,0.5)",
                pointStrokeColor: "rgba(249,10,249,0.5)",
                data: row,
                skipNullValues: true
            });	
		}
		
		if (config.showOhp){
			LineChart.datasets.push({
                label: "OH Press ("+units+")",
                fillColor: "rgba(10,249,249,0.6)",
                strokeColor: "rgba(10,249,249,0.5)",
                pointColor: "rgba(10,249,249,0.5)",
                pointStrokeColor: "rgba(10,249,249,0.5)",
                data: ohp,
                skipNullValues: true
            });	
		}
		
		// Chart Options
		var options = {
                    scaleFontSize : 15,
                    scaleFontColor : "#000000",
                    scaleOverride: config.chartManualScale,
                    scaleSteps: config.chartNumSteps,
                    scaleStepWidth: Math.ceil(config.chartStepSize),
                    scaleStartValue: config.chartStartValue,
					showXLabels: 5
					
		};
                
        // Draw Chart
        var myLineChart = new Chart(document.getElementById("canvas").getContext("2d")).Line(LineChart, options);
        legend(document.getElementById("placeholder"), LineChart);
    }
}

// From http://www.html5rocks.com/en/tutorials/file/dndfiles/ examples
// Handle files
  function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, last modified: ',
                  f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                  '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';

      var dataString = files[0];
  parseData(dataString);
  }

  document.getElementById('files').addEventListener('change', handleFileSelect, false);



// Legend (https://github.com/bebraw/Chart.js.legend)
function legend(parent, data) {
    parent.className = 'legend';
    var datas = data.hasOwnProperty('datasets') ? data.datasets : data;

    // remove possible children of the parent
    while(parent.hasChildNodes()) {
        parent.removeChild(parent.lastChild);
    }

    datas.forEach(function(d) {
        var title = document.createElement('span');
        title.className = 'title';
        parent.appendChild(title);

        var colorSample = document.createElement('div');
        colorSample.className = 'color-sample';
        colorSample.style.backgroundColor = d.hasOwnProperty('strokeColor') ? d.strokeColor : d.color;
        colorSample.style.borderColor = d.hasOwnProperty('fillColor') ? d.fillColor : d.color;
        title.appendChild(colorSample);

        var text = document.createTextNode(d.label);
        title.appendChild(text);
    });
}
